generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model applicant {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name   String      @db.VarChar(255)
  last_name    String      @db.VarChar(255)
  email        String      @db.VarChar(255)
  phone_number String      @db.VarChar(255)
  resume       String      @db.VarChar(255)
  job_id       String      @db.Uuid
  created_at   DateTime    @default(now()) @db.Timestamp(6)
  updated_at   DateTime    @default(now()) @db.Timestamp(6)
  job          job         @relation(fields: [job_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  interview    interview[]
  offer        offer[]
}

model company {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  job         job[]
}

model interview {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  interview_date DateTime  @db.Timestamp(6)
  interviewer    String    @db.VarChar(255)
  applicant_id   String    @db.Uuid
  job_id         String    @db.Uuid
  created_at     DateTime  @default(now()) @db.Timestamp(6)
  updated_at     DateTime  @default(now()) @db.Timestamp(6)
  applicant      applicant @relation(fields: [applicant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  job            job       @relation(fields: [job_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model job {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title        String      @db.VarChar(255)
  description  String      @db.VarChar(255)
  requirements String      @db.VarChar(255)
  salary       Int
  company_id   String      @db.Uuid
  created_at   DateTime    @default(now()) @db.Timestamp(6)
  updated_at   DateTime    @default(now()) @db.Timestamp(6)
  applicant    applicant[]
  interview    interview[]
  company      company     @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  offer        offer[]
}

model offer {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  offer_date   DateTime  @db.Timestamp(6)
  start_date   DateTime  @db.Timestamp(6)
  salary       Int
  applicant_id String    @db.Uuid
  job_id       String    @db.Uuid
  created_at   DateTime  @default(now()) @db.Timestamp(6)
  updated_at   DateTime  @default(now()) @db.Timestamp(6)
  applicant    applicant @relation(fields: [applicant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  job          job       @relation(fields: [job_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String    @unique @db.VarChar(255)
  firstName   String?   @db.VarChar(255)
  lastName    String?   @db.VarChar(255)
  roq_user_id String    @db.VarChar(255)
  tenant_id   String    @db.VarChar(255)
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  company     company[]
}
